#include <iostream>
#include<queue>
using namespace std;

int m, n;
int mx[40][40];
int dir[4][2] = { {0,1},{0,-1},{1,0},{-1,0} };

bool check(int x, int y) {
	if (x < m && x >= 0 && y <n && y >= 0 && mx[x][y] == 0)return 1;
	else return 0;
}

void bfs(int M[40][40], queue<int>&_x, queue<int>&_y, int a, int b)
{
	_x.push(a), _y.push(b);
	mx[a][b] = 1;

	while (!_x.empty())
	{
		for (int i = 0; i < 4; i++)
		{
			int x = _x.front() + dir[i][0];
			int y = _y.front() + dir[i][1];
			if (check(x, y))
			{
				_x.push(x); _y.push(y);
				mx[x][y] = 1;
			}
		}
		_x.pop(),_y.pop();
	}
}

int main()
{
	int t; cin >> t;
	while (t--)
	{
		cin >> m >> n;

		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++)
				cin >> mx[i][j];

		queue<int>_x, _y;
		for (int i = 0; i < n; i++)
			if (!mx[0][i])
				bfs(mx, _x, _y, 0, i);

		for (int i = 0; i < n; i++)
			if (!mx[i][0])
				bfs(mx, _x, _y, i, 0);

		for (int i = 0; i < n; i++)
			if (!mx[m-1][i])
				bfs(mx, _x, _y, m-1, i);

		for (int i = 0; i < n; i++)
			if (!mx[i][n-1])
				bfs(mx, _x, _y, n - 1, i);

		int num = 0;
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++)
				if (mx[i][j] == 0)
					num++;
		
		cout << num << endl;;
	}
	return 0;
}