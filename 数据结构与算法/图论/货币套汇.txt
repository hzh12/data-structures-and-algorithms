#include<bits/stdc++.h>
using namespace std;
const int N = 510;
int n, m, idx;
double g[N][N];
bool vis[N];
unordered_map<string,int> mp;
double dis[N];
int cnt[N];

bool spfa() {
 queue<int> q;
 for(int i = 0; i < n; ++i) {
  vis[i] = true;
  q.push(i);
 }
 for(int i = 0; i < n; ++i) dis[i] = 1;
 while(q.size()) {
  int t = q.front(); q.pop();
  vis[t] = false;
  
  for(int i = 0; i < n; ++i) {
   if(dis[i] < dis[t] * g[t][i]) {
    dis[i] = dis[t] * g[t][i];
    cnt[i] = cnt[t] + 1;
    if(dis[i] > 1.0 && cnt[i] >= n){
   // cout << dis[i] << ' ' << cnt[i] << endl; 
    return true;
    } 
    if(!vis[i]) {
     q.push(i);
     vis[i] = true;
    }
   } 
  }
 }
 return false;
} 

void init() {
 for(int i = 0; i < N; ++i)
  for(int j = 0; j < N; ++j)
   g[i][j] = 0.0;
 memset(vis, false, sizeof vis);
 for(int i = 0; i < N; ++i) dis[i] = 0, cnt[i] = 0;
}
int main() {
 int t;
  cin >> t;
 while(t--) {
  mp.clear();
  init(); idx = 0;
  cin >> n >> m;
  for(int i = 0; i < n; ++i) {
   string str;
    cin >> str;
   mp[str] = idx++;
  }
 // cout << m << endl; 
  for(int i = 0; i < m; ++i) {
   string a, b;
   double rate;
    cin >> a >> rate >> b;
   int u = mp[a], v = mp[b];
   g[u][v] = rate;
   //cout << a << ' ' < b <<
   
  }
  bool flag = spfa();

  if(flag) puts("YES");
  else puts("NO");
   
 }
 return 0;
}