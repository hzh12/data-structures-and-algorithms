#include<iostream>
#include<string>
#include<list>
using namespace std;
 
#define N 0x3f3f3f3f
 
int n, e;
int m[100][100], d[100], pos[100];
string str[100];
bool vis[100];
int ans = 0;
 
class Kru {//存储kruskal算法中的节点
public:
    int bef;
    int aft;
    int data;
    int flag;
    Kru() {
        bef = -1;
        aft = -1;
        data = 0;
        flag = 0;
    }
}kr[100];
 
int find(string str[], string ch)
{
    for (int i = 0; i < n; i++)
        if (str[i] == ch)return i;
    return -1;
}
void change(int visit[], int n, int a, int b) {//将两个顶点及与他们相通的顶点改成同样的值表示 
                                              //他们相通
    for (int i = 0; i < n; i++)
        if (visit[i] == a)
            visit[i] = b;
 
}
int findmin(Kru kr[], int in) {//找出kr[]数组中权重最小的边
    int minn = 10000;
    int index = 0;
    int flag = 0;
    for (int i = 0; i < in; i++) {
        if (!kr[i].flag && kr[i].data < minn) {//如果该边没被访问且最小
            minn = kr[i].data;
            index = i;
            flag = 1;
        }
    }
 
 
    return index;
 
}
 
void kruskal(string str[], int in, int n, Kru kr[]) {//kruskal算法
    int visit[100];
 
    for (int i = 0; i < n; i++)
        visit[i] = i;//初始visit[]数组
 
       //int k= 0;  
    cout << "kruskal:" << endl;
    int k = 0;
    while (true) {
        int minn = findmin(kr, in);//找出权重最小的边
 
        kr[minn].flag = 1;
        int t1 = kr[minn].bef;
        int t2 = kr[minn].aft;
 
 
        if (visit[t1] != visit[t2]) {//如果两个顶点的visit值不一样说明还没相通
 
            if (t1 > t2) {
                int t = t1;
                t1 = t2;
                t2 = t;
            }
            cout << str[t1] << " " << str[t2] << " " << kr[minn].data << endl;
            change(visit, n, visit[t1], visit[t2]);//将两个顶点连通
        }
        k++;
        if (k >= in)
            break;
    }
 
}
 
 
 
void prime(int start)
{
    memset(vis, 0, sizeof vis);
    vis[start] = 1;
 
    for (int i = 0; i < n; i++)
    {
        d[i] = m[start][i];
        pos[i] = start * 100 + i;
    }
 
    string bef[100], aft[100];
    int val[100];
     
    int minn,k,r=0;
    for (int i = 0; i < n - 1; i++)
    {
        minn = N;
        for (int j = 1; j < n; j++)
            if (vis[j] == 0 && minn > d[j])
                minn = d[j], k = j;
 
        vis[k] = 1;
        bef[r] = str[pos[k] / 100];
        aft[r] = str[k];
        val[r++] = d[k];
        ans += minn;
 
        for (int j = 0; j < n; j++)
        {
            if (vis[j] == 0 && d[j] > m[k][j])
                d[j] = m[k][j], pos[j] = k * 100 + j;
        }
    }
    cout << ans << endl<< "prim:" << endl;
 
    for(int i=0;i<r;i++)
        cout<<bef[i] << ' ' << aft[i] << " " << val[i] << endl;
}
 
void kruskal()
{
 
}
 
int main() {
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> str[i];
 
    memset(m, 0x3f, sizeof m);
 
    cin >> e;
    for (int i = 0; i < e; i++)
    {
        string p1, p2;
        int val;
        cin >> p1 >> p2 >> val;
 
        int pos1 = find(str, p1);
        int pos2 = find(str, p2);
 
        m[pos1][pos2] = m[pos2][pos1] = val;
 
        kr[i].bef = pos1;
        kr[i].aft = pos2;
        kr[i].data = val;
        kr[i].flag = 0;
 
    }
 
    string start_p; cin >> start_p;
 
    int start = find(str, start_p);
    prime(start);
 
    kruskal(str,e,n,kr);
 
   return 0;
}

   