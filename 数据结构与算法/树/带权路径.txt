#include <iostream>
#include <queue>
using namespace std;

class BiNode{
    char data;
    BiNode *lChild;
    BiNode *rChild;
    int road;
public:
    BiNode():lChild(NULL),rChild(NULL){}
    BiNode(char e):data(e),lChild(NULL),rChild(NULL){}
    ~BiNode(){delete lChild; delete rChild;}
    friend class BiTree;
};

class BiTree{
    BiNode *root;
    int count;
    queue<int> weight;
    void CreateTree(BiNode *&t, int layer);
    void preOrder(BiNode *t);
public:
    BiTree():root(NULL),count(0){}
    void CreateTree();
    void preOrder();
    void getWeight();
};

void BiTree::CreateTree(BiNode *&t,int layer) {
    char c;
    cin>>c;
    if(c!='0')
    {
        t = new BiNode(c);
        t->road = layer;
        CreateTree(t->lChild,layer+1);
        CreateTree(t->rChild,layer+1);
    }
}

void BiTree::CreateTree() {
    CreateTree(root,0);
}

void BiTree::preOrder(BiNode *t) {
    if(t)
    {
        if(!t->lChild && !t->rChild) {
            count += weight.front() * t->road;
            weight.pop();
        }
        preOrder(t->lChild);
        preOrder(t->rChild);
    }
}

void BiTree::preOrder() {
    preOrder(root);
    cout<<count<<endl;
}

void BiTree::getWeight() {
    int n;
    cin>>n;
    while (n--)
    {
        int w;
        cin>>w;
        weight.push(w);
    }
}

int main()
{
    int t;
    cin>>t;
    while (t--)
    {
        BiTree myTree;
        myTree.CreateTree();
        myTree.getWeight();
        myTree.preOrder();
    }
    return 0;
}

#include<iostream>
#include<string>
using namespace std;
class BitreeNode
{
public:
    char data;
    int weight;
    int hight;
    BitreeNode* left;
    BitreeNode* right;
    BitreeNode() :hight(0), weight(0), left(NULL), right(NULL) {}
    ~BitreeNode() {}
};
class Bitree
{
private:
    BitreeNode* Root;
    int pos, po;
    int APL;
    string strtree;
    BitreeNode* CreateBitree(int w[], int fatherhigh);
    void preorder(BitreeNode* t);
public:

    Bitree() { APL = 0; };
    ~Bitree() {};
    void CreateTree(string TreeArray, int w[]);
    void preorder();
};
void Bitree::CreateTree(string treearray, int w[])
{
    pos = 0;
    po = 0;
    strtree.assign(treearray);
    Root = CreateBitree(w, -1);
}
BitreeNode* Bitree::CreateBitree(int w[], int fatherhigh)
{
    BitreeNode* T;
    char ch;
    ch = strtree[pos++];
    if (ch == '0')
        T = NULL;
    else
    {
        T = new BitreeNode();
        T->data = ch;
        T->hight = fatherhigh + 1;
        if (T->data >= 'A' && T->data <= 'Z')
            T->weight = w[po++];
        T->left = CreateBitree(w, T->hight);
        T->right = CreateBitree(w, T->hight);
    }
    return T;
}
void Bitree::preorder()
{
    Root->hight = 1;
    preorder(Root);
    cout << APL << endl;
}
void Bitree::preorder(BitreeNode* t)
{
    if (t)
    {
        //cout << t->data << "-" << t->weight << "-" << t->hight << endl;
        APL = APL + t->weight * t->hight;
        preorder(t->left);
        preorder(t->right);
    }
}
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        string str;
        cin >> str;
        Bitree* tree;
        int n, * w;
        cin >> n;
        w = new int[n];
        for (int i = 0; i < n; i++)
            cin >> w[i];
        tree = new Bitree();
        tree->CreateTree(str, w);
        tree->preorder();
    }
}

