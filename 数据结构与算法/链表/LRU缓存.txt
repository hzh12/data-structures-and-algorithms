struct Node {
	int key, value;
	Node* pre, *next;
	Node() :key(0), value(0), pre(nullptr), next(nullptr) {}
	Node(int _key, int _value) :key(_key), value(_value), pre(nullptr), next(nullptr) {}
};

class LRUCache {
private:
	unordered_map<int, Node*> cache;
	Node*head, *tail;
	int size, capacity;
public:
	LRUCache(int _capacity) :capacity(_capacity), size(0) {
		// 使用伪头部和伪尾部节点
		head = new Node();
		tail = new Node();
		head->next = tail;
		tail->pre = head;
	}

	int get(int key)
	{
		if (!cache.count(key))return -1;
		Node* node = cache[key];
		moveToHead(node);
		return node->value;
	}
	void put(int key, int value) {
		if (!cache.count(key))
		{
			Node*node = new Node(key, value);
			cache[key] = node;
			addToHead(node);
			++size;
			if (size > capacity)
			{
				Node* removed = removeTail();
				cache.erase(removed->key);
				delete removed;
				--size;
			}
		}
		else
		{
			Node* node = cache[key];
			node->value = value;
			moveToHead(node);
		}
	}
	void addToHead(Node* node) {
		node->pre = head;
		node->next = head->next;
		head->next->pre = node;
		head->next = node;
	}
	Node* removeTail() {
		Node* node = tail->pre;
		removeNode(node);
		return node;
	}
	void removeNode(Node*node) {
		node->pre->next = node->next;
		node->next->pre = node->pre;
	}
	void moveToHead(Node* node) {
		removeNode(node);
		addToHead(node);
	}

};