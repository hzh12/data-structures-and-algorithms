int pow_mod(int a,int b,int  c)  //不考虑负数
{
    int ans = 1,base=a;// ans：结果；base：底数
    base = base % c;
    //【考虑0次方的情况】
    if(b==0)
    {
        return 1%c;// 任意a的0次幂都是1,故直接用1%c即可 
    } 
    while(b)
    {   
        if(b & 1) // 与运算，判断奇偶性
        ans = (ans*base) % c; 
        b = b >> 1;// 右移一位，相当于除2
        base = (base * base) % c; 
    } 
    return ans;
} 

  double myPow(double x, int n) {//迭代
      if(n==0)return 1;
        double res= 1,base=x; 
        for(int i=n;i!=0;i/=2)
        {
            if(i&1)res*=base;
            base*=base;
        }
        return n>0?res:1.0/res;
    }

 double myPow(double x, int n) {//递归
      if(n==0)return 1;
       if(n==-1)return 1/x;
      if(n&1)return myPow(x*x,n>>1)*x;
      else return myPow(x*x,n>>1);
    }