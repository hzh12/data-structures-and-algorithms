int searchLeft(vector<int>& nums, int target) {   //查找第一个大于等于target
        int left = 0, right = nums.size() - 1;
        while (left <= right) {
            int middle = (left + right) / 2;
            if (nums[middle] < target) 
                left = middle + 1;
             else if (nums[middle] >= target) 
                right = middle - 1;
        }
        return left;
    }
第一个大于等于==小于  	第一个大于==小于等于
nums[middle] < target       	nums[middle] <= target
最后一个小于等于==大于  	最后一个小于==大于等于
nums[middle] > target       	nums[middle] >= target

 int search(vector<int>& nums, int target) {  //查找target
        int pivot, left = 0, right = nums.size() - 1;
    while (left <= right) {
      pivot = left + (right - left) / 2;
      if (nums[pivot] == target) return pivot;
      if (target < nums[pivot]) right = pivot - 1;
      else left = pivot + 1;
    }
    return -1;
    }


寻找左侧边界的二分搜索
int left_bound(int[] nums, int target) {
    if (nums.length == 0) return -1;
    int left = 0;
    int right = nums.length; // 注意

    while (left < right) { // 注意
        int mid = (left + right) / 2;
        if (nums[mid] == target) {
            right = mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else if (nums[mid] > target) {
            right = mid; // 注意
        }
    }
    return left;
}

while(left < right){    //第一个满足条件"长度为len时能得到的木棒段数<k"的len
        int mid = (left + right) / 2;
        if(Incise_Num(w,n,mid) < k){
            right = mid;
        }
        else{
            left = mid + 1;
        }
    }

