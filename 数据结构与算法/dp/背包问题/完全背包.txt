有 N种物品和一个容量是 V 的背包，每种物品都有无限件可用。
第 i 种物品的体积是 vi，价值是 wi。
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。 输出最大价值。

1》01背包问题中要按照v=V…0的逆序来循环。
这是因为要保证第i次循环中的状态f[i][v]是由状态f[i-1][v-c[i]]递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果f[i-1][v-c[i]]。
2》而完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果f[i][v-c[i]]，所以就可以并且必须采用v=0…V的顺序循环。这就是这个简单的程序为何成立的道理

时间复杂度：O(NV)
空间复杂度：O(V)

class Solution {
public:
	int f[1001];
	int solve(int n, int v, int V[], int W[])
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = V[i]; j <= v; j++)
				f[j] = max(f[j], f[j - V[i]] + W[i]);
		}
		return f[v];
	}
};