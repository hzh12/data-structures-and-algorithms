首先，首尾房间不能同时被抢，那么只可能有三种不同情况：
要么都不被抢；
要么第一间房子被抢最后一间不抢；
要么最后一间房子被抢第一间不抢。
不过，其实我们不需要比较三种情况，只要比较情况二和情况三就行了，
****因为这两种情况对于房子的选择余地比情况一大呀，
房子里的钱数都是非负数，所以选择余地大，最优决策结果肯定不会小。

public int rob(int[] nums) {
    int n = nums.length;
    if (n == 1) return nums[0];
    return Math.max(robRange(nums, 0, n - 2), 
                    robRange(nums, 1, n - 1));
}

// 仅计算闭区间 [start,end] 的最优结果
int robRange(int[] nums, int start, int end) {
    int n = nums.length;
    int dp_i_1 = 0, dp_i_2 = 0;
    int dp_i = 0;
    for (int i = end; i >= start; i--) {
        dp_i = Math.max(dp_i_1, nums[i] + dp_i_2);
        dp_i_2 = dp_i_1;
        dp_i_1 = dp_i;
    }
    return dp_i;
}

https://leetcode.cn/problems/house-robber-ii/description/
class Solution {
public:
    int n;
    int rob(vector<int>& nums) {
        n = nums.size();
        if (n == 1)
            return nums[0];
        return max(robRange(nums, 0, n - 2), robRange(nums, 1, n - 1));
    }
    int robRange(vector<int>& nums, int start, int end) {
        vector<int> dp(n + 2);
        for (int i = end; i >= start; i--) {
            dp[i] = max(dp[i + 1], dp[i + 2] + nums[i]);
        }
        return dp[start];
    }
};