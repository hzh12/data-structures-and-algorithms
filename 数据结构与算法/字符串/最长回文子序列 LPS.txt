#include<bits/stdc++.h> //最长回文子序列 LPS（Longest Palindromic Subsequence）
using namespace std;

int lps(char *str, int i, int j)   //递归解：有重复子问题
{
	if (i == j)return 1;
	if (i > j)return 0;
	if (str[i] == str[j])return lps(str, i + 1, j - 1) + 2;
	else return max(lps(str, i, j - 1), lps(str, i + 1, j));
}

int lps(char* str)   //dp解,时间复杂度=n^2
{
	int n = strlen(str);
	//vector<vector<int> > dp(n, vector<int>(n));
	int dp[10][10], tmp;
	memset(dp, 0, sizeof(dp));
	for (int i = 0; i < n; i++)dp[i][i] = 1;

	for (int j = 0; j < n; j++)
	{
		for (int i = j - 1; i >= 0; i--)
		{
			if (str[i] == str[j])dp[i][j] = dp[i + 1][j - 1] + 2;
			else dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
		}
	}
	return dp[0][n - 1];
}

int main()
{
	char str[] = "cabbeaf";
	int n = strlen(str);
	int res = lps(str);              //dp
	//int res = lps(str, 0, n - 1);  //递归
	cout << res;
	return 0;
}

int NumOfLps(string str)
{
	int len = str.length();
	vector<vector<int> >dp(len, vector<int>(len));
	for (int i = 0; i < len; i++)dp[i][i] = 1;

	for (int j = 0; j < len; j++)
	{
		for (int i = j - 1; i >= 0; i--)
		{
			if (str[i] == str[j])dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
			else dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
		}
	}
	return dp[0][len - 1];
}